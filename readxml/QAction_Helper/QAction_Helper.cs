// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Skyline.DataMiner.Scripting
{
public static class Parameter
{
	/// <summary>PID: 10000 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int xmliterationcounter_10000 = 10000;
	/// <summary>PID: 10000 | Type: read</summary>
	public const int xmliterationcounter = 10000;
	/// <summary>PID: 10001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int xmldebugmsg_10001 = 10001;
	/// <summary>PID: 10001 | Type: read</summary>
	public const int xmldebugmsg = 10001;
	/// <summary>PID: 10100 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int jsoniterationcounter_10100 = 10100;
	/// <summary>PID: 10100 | Type: read</summary>
	public const int jsoniterationcounter = 10100;
	/// <summary>PID: 10101 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int jsondebugmsg_10101 = 10101;
	/// <summary>PID: 10101 | Type: read</summary>
	public const int jsondebugmsg = 10101;
	public class Write
	{
		/// <summary>PID: 10002 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int xmlprocessfile_10002 = 10002;
		/// <summary>PID: 10002 | Type: write</summary>
		public const int xmlprocessfile = 10002;
		/// <summary>PID: 10102 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int jsonprocessfile_10102 = 10102;
		/// <summary>PID: 10102 | Type: write</summary>
		public const int jsonprocessfile = 10102;
	}
	public class Datatable
	{
		/// <summary>PID: 2000</summary>
		public const int tablePid = 2000;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 2001</summary>
		public const int indexColumnPid = 2001;
		public class Pid
		{
			/// <summary>PID: 2001 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int idcolumn_2001 = 2001;
			/// <summary>PID: 2001 | Type: read</summary>
			public const int idcolumn = 2001;
			/// <summary>PID: 2002 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int xmltitlecolumn_2002 = 2002;
			/// <summary>PID: 2002 | Type: read</summary>
			public const int xmltitlecolumn = 2002;
			/// <summary>PID: 2003 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int xmltimecolumn_2003 = 2003;
			/// <summary>PID: 2003 | Type: read</summary>
			public const int xmltimecolumn = 2003;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int idcolumn_2001 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int idcolumn = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int xmltitlecolumn_2002 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int xmltitlecolumn = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int xmltimecolumn_2003 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int xmltimecolumn = 2;
		}
	}
	public class Datatablejson
	{
		/// <summary>PID: 2100</summary>
		public const int tablePid = 2100;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 2101</summary>
		public const int indexColumnPid = 2101;
		public class Pid
		{
			/// <summary>PID: 2101 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int datatablejsondataidcolumn_2101 = 2101;
			/// <summary>PID: 2101 | Type: read</summary>
			public const int datatablejsondataidcolumn = 2101;
			/// <summary>PID: 2102 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int datatablejsondatacolumnjson_2102 = 2102;
			/// <summary>PID: 2102 | Type: read</summary>
			public const int datatablejsondatacolumnjson = 2102;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int datatablejsondataidcolumn_2101 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int datatablejsondataidcolumn = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int datatablejsondatacolumnjson_2102 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int datatablejsondatacolumnjson = 1;
		}
	}
}
public class WriteParameters
{
	/// <summary>PID: 10002  | Type: write | DISCREETS: Process XML file = check</summary>
	public System.Object Xmlprocessfile {get { return Protocol.GetParameter(10002); }set { Protocol.SetParameter(10002, value); }}
	/// <summary>PID: 10102  | Type: write | DISCREETS: Process JSON file = check</summary>
	public System.Object Jsonprocessfile {get { return Protocol.GetParameter(10102); }set { Protocol.SetParameter(10102, value); }}
	public SLProtocolExt Protocol;
	public WriteParameters(SLProtocolExt protocol)
	{
		Protocol = protocol;
	}
}
public interface SLProtocolExt : SLProtocol
{
	/// <summary>PID: 2000</summary>
	DatatableQActionTable datatable { get; set; }
	/// <summary>PID: 2100</summary>
	DatatablejsonQActionTable datatablejson { get; set; }
	object Afterstartup_dummy { get; set; }
	object Triggerqaction_dummy { get; set; }
	object Idcolumn_2001 { get; set; }
	object Idcolumn { get; set; }
	object Xmltitlecolumn_2002 { get; set; }
	object Xmltitlecolumn { get; set; }
	object Xmltimecolumn_2003 { get; set; }
	object Xmltimecolumn { get; set; }
	object Datatablejsondataidcolumn_2101 { get; set; }
	object Datatablejsondataidcolumn { get; set; }
	object Datatablejsondatacolumnjson_2102 { get; set; }
	object Datatablejsondatacolumnjson { get; set; }
	object Xmliterationcounter_10000 { get; set; }
	object Xmliterationcounter { get; set; }
	object Xmldebugmsg_10001 { get; set; }
	object Xmldebugmsg { get; set; }
	object Xmlprocessfile_10002 { get; set; }
	object Xmlprocessfile { get; set; }
	object Jsoniterationcounter_10100 { get; set; }
	object Jsoniterationcounter { get; set; }
	object Jsondebugmsg_10101 { get; set; }
	object Jsondebugmsg { get; set; }
	object Jsonprocessfile_10102 { get; set; }
	object Jsonprocessfile { get; set; }
	WriteParameters Write { get; set; }
}
public class ConcreteSLProtocolExt : ConcreteSLProtocol, SLProtocolExt
{
	/// <summary>PID: 2000</summary>
	public DatatableQActionTable datatable { get; set; }
	/// <summary>PID: 2100</summary>
	public DatatablejsonQActionTable datatablejson { get; set; }
	/// <summary>PID: 1  | Type: dummy</summary>
	public System.Object Afterstartup_dummy {get { return GetParameter(1); }set { SetParameter(1, value); }}
	/// <summary>PID: 5  | Type: dummy</summary>
	public System.Object Triggerqaction_dummy {get { return GetParameter(5); }set { SetParameter(5, value); }}
	/// <summary>PID: 2001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Idcolumn_2001 {get { return GetParameter(2001); }set { SetParameter(2001, value); }}
	/// <summary>PID: 2001  | Type: read</summary>
	public System.Object Idcolumn {get { return GetParameter(2001); }set { SetParameter(2001, value); }}
	/// <summary>PID: 2002  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Xmltitlecolumn_2002 {get { return GetParameter(2002); }set { SetParameter(2002, value); }}
	/// <summary>PID: 2002  | Type: read</summary>
	public System.Object Xmltitlecolumn {get { return GetParameter(2002); }set { SetParameter(2002, value); }}
	/// <summary>PID: 2003  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Xmltimecolumn_2003 {get { return GetParameter(2003); }set { SetParameter(2003, value); }}
	/// <summary>PID: 2003  | Type: read</summary>
	public System.Object Xmltimecolumn {get { return GetParameter(2003); }set { SetParameter(2003, value); }}
	/// <summary>PID: 2101  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Datatablejsondataidcolumn_2101 {get { return GetParameter(2101); }set { SetParameter(2101, value); }}
	/// <summary>PID: 2101  | Type: read</summary>
	public System.Object Datatablejsondataidcolumn {get { return GetParameter(2101); }set { SetParameter(2101, value); }}
	/// <summary>PID: 2102  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Datatablejsondatacolumnjson_2102 {get { return GetParameter(2102); }set { SetParameter(2102, value); }}
	/// <summary>PID: 2102  | Type: read</summary>
	public System.Object Datatablejsondatacolumnjson {get { return GetParameter(2102); }set { SetParameter(2102, value); }}
	/// <summary>PID: 10000  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Xmliterationcounter_10000 {get { return GetParameter(10000); }set { SetParameter(10000, value); }}
	/// <summary>PID: 10000  | Type: read</summary>
	public System.Object Xmliterationcounter {get { return GetParameter(10000); }set { SetParameter(10000, value); }}
	/// <summary>PID: 10001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Xmldebugmsg_10001 {get { return GetParameter(10001); }set { SetParameter(10001, value); }}
	/// <summary>PID: 10001  | Type: read</summary>
	public System.Object Xmldebugmsg {get { return GetParameter(10001); }set { SetParameter(10001, value); }}
	/// <summary>PID: 10002  | Type: write | DISCREETS: Process XML file = check</summary>
	public System.Object Xmlprocessfile_10002 {get { return GetParameter(10002); }set { SetParameter(10002, value); }}
	/// <summary>PID: 10002  | Type: write | DISCREETS: Process XML file = check</summary>
	public System.Object Xmlprocessfile {get { return Write.Xmlprocessfile; }set { Write.Xmlprocessfile = value; }}
	/// <summary>PID: 10100  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Jsoniterationcounter_10100 {get { return GetParameter(10100); }set { SetParameter(10100, value); }}
	/// <summary>PID: 10100  | Type: read</summary>
	public System.Object Jsoniterationcounter {get { return GetParameter(10100); }set { SetParameter(10100, value); }}
	/// <summary>PID: 10101  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Jsondebugmsg_10101 {get { return GetParameter(10101); }set { SetParameter(10101, value); }}
	/// <summary>PID: 10101  | Type: read</summary>
	public System.Object Jsondebugmsg {get { return GetParameter(10101); }set { SetParameter(10101, value); }}
	/// <summary>PID: 10102  | Type: write | DISCREETS: Process JSON file = check</summary>
	public System.Object Jsonprocessfile_10102 {get { return GetParameter(10102); }set { SetParameter(10102, value); }}
	/// <summary>PID: 10102  | Type: write | DISCREETS: Process JSON file = check</summary>
	public System.Object Jsonprocessfile {get { return Write.Jsonprocessfile; }set { Write.Jsonprocessfile = value; }}
	public WriteParameters Write { get; set; }
	public ConcreteSLProtocolExt()
	{
		datatable = new DatatableQActionTable(this, 2000, "datatable");
		datatablejson = new DatatablejsonQActionTable(this, 2100, "datatablejson");
		Write = new WriteParameters(this);
	}
}
/// <summary>IDX: 0</summary>
public class DatatableQActionTable : QActionTable, IEnumerable<DatatableQActionRow>
{
	public DatatableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<DatatableQActionRow> GetEnumerator() { return new QActionTableEnumerator<DatatableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class DatatablejsonQActionTable : QActionTable, IEnumerable<DatatablejsonQActionRow>
{
	public DatatablejsonQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<DatatablejsonQActionRow> GetEnumerator() { return new QActionTableEnumerator<DatatablejsonQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class DatatableQActionRow : QActionTableRow
{
	/// <summary>PID: 2001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Idcolumn_2001 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2001 | Type: read</summary>
	public System.Object Idcolumn { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2002 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Xmltitlecolumn_2002 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 2002 | Type: read</summary>
	public System.Object Xmltitlecolumn { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 2003 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Xmltimecolumn_2003 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 2003 | Type: read</summary>
	public System.Object Xmltimecolumn { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	public DatatableQActionRow() : base(0, 3) { }
	public DatatableQActionRow(System.Object[] oRow) : base(0, 3, oRow) { }
	public static implicit operator DatatableQActionRow(System.Object[] source) { return new DatatableQActionRow(source); }
	public static implicit operator System.Object[](DatatableQActionRow source) { return source.ToObjectArray(); }
}
/// <summary>IDX: 0</summary>
public class DatatablejsonQActionRow : QActionTableRow
{
	/// <summary>PID: 2101 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Datatablejsondataidcolumn_2101 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2101 | Type: read</summary>
	public System.Object Datatablejsondataidcolumn { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2102 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Datatablejsondatacolumnjson_2102 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 2102 | Type: read</summary>
	public System.Object Datatablejsondatacolumnjson { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	public DatatablejsonQActionRow() : base(0, 2) { }
	public DatatablejsonQActionRow(System.Object[] oRow) : base(0, 2, oRow) { }
	public static implicit operator DatatablejsonQActionRow(System.Object[] source) { return new DatatablejsonQActionRow(source); }
	public static implicit operator System.Object[](DatatablejsonQActionRow source) { return source.ToObjectArray(); }
}
}
