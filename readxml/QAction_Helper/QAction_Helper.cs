// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Skyline.DataMiner.Scripting
{
public static class Parameter
{
	/// <summary>PID: 10000 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int iterationcounter_10000 = 10000;
	/// <summary>PID: 10000 | Type: read</summary>
	public const int iterationcounter = 10000;
	/// <summary>PID: 10001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int debugmsg_10001 = 10001;
	/// <summary>PID: 10001 | Type: read</summary>
	public const int debugmsg = 10001;
	public class Write
	{
		/// <summary>PID: 10002 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int processfile_10002 = 10002;
		/// <summary>PID: 10002 | Type: write</summary>
		public const int processfile = 10002;
	}
	public class Datatable
	{
		/// <summary>PID: 2000</summary>
		public const int tablePid = 2000;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 2001</summary>
		public const int indexColumnPid = 2001;
		public class Pid
		{
			/// <summary>PID: 2001 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int idcolumn_2001 = 2001;
			/// <summary>PID: 2001 | Type: read</summary>
			public const int idcolumn = 2001;
			/// <summary>PID: 2002 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int datacolumn_2002 = 2002;
			/// <summary>PID: 2002 | Type: read</summary>
			public const int datacolumn = 2002;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int idcolumn_2001 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int idcolumn = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int datacolumn_2002 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int datacolumn = 1;
		}
	}
}
public class WriteParameters
{
	/// <summary>PID: 10002  | Type: write | DISCREETS: Process XML file = check</summary>
	public System.Object Processfile {get { return Protocol.GetParameter(10002); }set { Protocol.SetParameter(10002, value); }}
	public SLProtocolExt Protocol;
	public WriteParameters(SLProtocolExt protocol)
	{
		Protocol = protocol;
	}
}
public interface SLProtocolExt : SLProtocol
{
	/// <summary>PID: 2000</summary>
	DatatableQActionTable datatable { get; set; }
	object Afterstartup_dummy { get; set; }
	object Triggerqaction_dummy { get; set; }
	object Idcolumn_2001 { get; set; }
	object Idcolumn { get; set; }
	object Datacolumn_2002 { get; set; }
	object Datacolumn { get; set; }
	object Iterationcounter_10000 { get; set; }
	object Iterationcounter { get; set; }
	object Debugmsg_10001 { get; set; }
	object Debugmsg { get; set; }
	object Processfile_10002 { get; set; }
	object Processfile { get; set; }
	WriteParameters Write { get; set; }
}
public class ConcreteSLProtocolExt : ConcreteSLProtocol, SLProtocolExt
{
	/// <summary>PID: 2000</summary>
	public DatatableQActionTable datatable { get; set; }
	/// <summary>PID: 1  | Type: dummy</summary>
	public System.Object Afterstartup_dummy {get { return GetParameter(1); }set { SetParameter(1, value); }}
	/// <summary>PID: 5  | Type: dummy</summary>
	public System.Object Triggerqaction_dummy {get { return GetParameter(5); }set { SetParameter(5, value); }}
	/// <summary>PID: 2001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Idcolumn_2001 {get { return GetParameter(2001); }set { SetParameter(2001, value); }}
	/// <summary>PID: 2001  | Type: read</summary>
	public System.Object Idcolumn {get { return GetParameter(2001); }set { SetParameter(2001, value); }}
	/// <summary>PID: 2002  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Datacolumn_2002 {get { return GetParameter(2002); }set { SetParameter(2002, value); }}
	/// <summary>PID: 2002  | Type: read</summary>
	public System.Object Datacolumn {get { return GetParameter(2002); }set { SetParameter(2002, value); }}
	/// <summary>PID: 10000  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iterationcounter_10000 {get { return GetParameter(10000); }set { SetParameter(10000, value); }}
	/// <summary>PID: 10000  | Type: read</summary>
	public System.Object Iterationcounter {get { return GetParameter(10000); }set { SetParameter(10000, value); }}
	/// <summary>PID: 10001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Debugmsg_10001 {get { return GetParameter(10001); }set { SetParameter(10001, value); }}
	/// <summary>PID: 10001  | Type: read</summary>
	public System.Object Debugmsg {get { return GetParameter(10001); }set { SetParameter(10001, value); }}
	/// <summary>PID: 10002  | Type: write | DISCREETS: Process XML file = check</summary>
	public System.Object Processfile_10002 {get { return GetParameter(10002); }set { SetParameter(10002, value); }}
	/// <summary>PID: 10002  | Type: write | DISCREETS: Process XML file = check</summary>
	public System.Object Processfile {get { return Write.Processfile; }set { Write.Processfile = value; }}
	public WriteParameters Write { get; set; }
	public ConcreteSLProtocolExt()
	{
		datatable = new DatatableQActionTable(this, 2000, "datatable");
		Write = new WriteParameters(this);
	}
}
/// <summary>IDX: 0</summary>
public class DatatableQActionTable : QActionTable, IEnumerable<DatatableQActionRow>
{
	public DatatableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<DatatableQActionRow> GetEnumerator() { return new QActionTableEnumerator<DatatableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class DatatableQActionRow : QActionTableRow
{
	/// <summary>PID: 2001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Idcolumn_2001 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2001 | Type: read</summary>
	public System.Object Idcolumn { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2002 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Datacolumn_2002 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 2002 | Type: read</summary>
	public System.Object Datacolumn { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	public DatatableQActionRow() : base(0, 2) { }
	public DatatableQActionRow(System.Object[] oRow) : base(0, 2, oRow) { }
	public static implicit operator DatatableQActionRow(System.Object[] source) { return new DatatableQActionRow(source); }
	public static implicit operator System.Object[](DatatableQActionRow source) { return source.ToObjectArray(); }
}
}
